extends layout.jade

mixin fielddesc(value, type, document_url)
    - var value_url = value && value.url;
    - var cloudinary_url = value_url && value.url.split('/upload/')[0] + '/upload/c_fill,h_80,w_80/' + value.public_id + '.png';
    - var geomery = value && value.geometry && value.geometry.lat + ',' + value.geometry.lng;
    - var maps_url = geomery && 'https://maps.google.com/?q=' + geomery;
    - var filename = value && value.filename;
    case type
        when 'Picture'
            a(href=value_url, target='_blank'): img(src=cloudinary_url)

        when 'Html'
            !=value

        when 'Filepicker'
            - if (value)
                a(href=value_url, target='_blank')
                    - if (value.isWriteable)
                        =filename
                    - else
                        img(src=value_url+'/convert?fit=crop&w=80&h=80')

        when 'File'
            a(href=value_url, target='_blank'): =filename

        when 'GeoPoint'
            a(href=maps_url, target='_blank'): =geomery

        when 'Boolean'
            i(class=(value ? 'icon-ok' : 'icon-remove'))

        default
            a(href=document_url): =value


block breadcrumb
    span.divider /
    | #{label}

block body
    .page-header
        h2 #{label}

    #content.row
        div(class=(filters.length?'span12':''))
            .btn-toolbar.clearfix
                - if (creatable)
                    a.btn.pull-right.btn-warning(href="#{rootPath}/model/#{model_name}/document/new#{makeLink()}")
                        i.icon-plus.icon-white
                        |  New&nbsp;
                        - if (singular)
                            strong #{singular}
                        - else
                            strong #{model_name}
                            |  item

                - if (search)
                    div
                        form(class="form-inline")
                            input(type="text",name="_search",value="#{search_value}",class="span5")
                            - for(var key in current_filters)
                                - if(key != "_search")
                                    input(type="hidden",name="#{key}",value="#{current_filters[key]}")
                            - if(dialog)
                                input(type="hidden",name="_dialog",value="yes")
                            button(type="submit",class="btn") Search

                - if (sortable)
                    button#reorder.btn.btn-success.pull-left.hide(data-loading-text='Saving...', data-saved-text='Saved!')
                        i.icon-ok.icon-white
                        |  Save Order

                - if (actions.length && dataTable.data.length)
                    #actions.input-prepend.hide
                        span.add-on With selected: &nbsp;
                        div.btn-group
                            - each action in actions
                                if (action.id == 'delete')
                                    button.btn.btn-danger(value='#{action.id}')
                                        i.icon-trash.icon-white
                                        |  #{action.label}
                                else
                                    button.btn(value='#{action.id}') #{action.label}

            - if (!dataTable.data.length)
                p.center No documents yet

            - else
                p.counter Viewing #{start+1}–#{start + dataTable.data.length} of #{total_count} documents

                table.table.table-bordered.table-hover
                    thead
                        tr
                            th.center(width='50')
                                input.select-all-rows(type='checkbox')
                            - each field in dataTable.header
                                th.table-header-repeat.line-left.minwidth-1
                                    a(href='#{field.href)}') #{field.label)
                            if cloneable
                                th(width='130') &nbsp;

                    tbody(class=sortable?'sortable':'')
                        - each row in dataTable.data
                            - var document_url = rootPath + '/model/' + model_name + '/document/' + row.id
                            tr(id=row.id)
                                td.center
                                    input.select-row(type='checkbox')
                                    if sortable
                                        span.list-drag: i.icon-resize-vertical

                                - each field in row.data
                                    - var cls = ''
                                    - var width = ''

                                    case field.type
                                        when 'Boolean'
                                            cls = ['center']
                                            width = '60'
                                        when 'Filepicker'
                                            cls = ['center']
                                            width = '85'
                                        when 'Picture'
                                            cls = ['center']
                                            width = '85'

                                    td(class=cls, width=width)
                                        +fielddesc(field.value, field.type, document_url)

                                td.center
                                    div.btn-group
                                        a.btn.btn-primary(href=document_url) Edit
                                        if cloneable
                                            a.btn.btn-default(href="#{rootPath}/model/#{model_name}/document/new?orig=#{row.id}") Duplicate

                p.counter Viewing #{start+1}–#{start + dataTable.data.length} of #{total_count} documents
                - if (total_count > count)
                    .pagination
                        ul
                            - for (var i = 0, page = 1; i < total_count; i += count, page++)
                                - if (start == i)
                                    li.active
                                        span #{page}
                                - else if (start/count <= page+5 && start/count >= page-5 || i == 0 || i+count >= total_count)
                                    li
                                        a(href='#{makeLink("start",i)}') #{page}

        - if (filters.length)
            #filters.span3
                .well
                    h3
                        i.icon-filter
                        | Filters
                        small.pull-right
                            a(href='#{rootPath}/model/#{model_name}') Clear

                    ul.nav.nav-list
                        - each filter in filters
                            li.nav-header
                                strong #{filter.key}:
                            - if (current_filters[filter.key])
                                li
                                    a(href='#{makeLink(filter.key,"")}') All
                            - else
                                li.active
                                    strong All
                            - each value in filter.values
                                - if (value)
                                    li
                                        - if (current_filters[filter.key] !== String(value.value) )
                                            a(href='#{makeLink(filter.key, value.value)}') #{value.text}
                                        - else
                                            strong #{value.text}

                            - if (filter.isString)
                                div.input-append
                                    input.literal(type='text', name='#{filter.key}', value='#{current_filters[filter.key] || ""}')
                                    span.add-on: button.icon-calendar.free_search(data-href='#{makeLink(filter.key, "__replace__")}')

block scripts
    script.
        var startIndex = #{start},
            model = '#{model_name}';

    script(src="#{rootPath}/js/model.js")
